lang(math).
lang(eng).

append([],L2,L2).
append([H|T],L2,[H|L3]):-
	append(T,L2,L3).

last(E,[E]):-!.
last(E,[H|T]).
	last(E,T).

pow(N,0,1):-!.
pow(N,1,N).
pow(N,M,R):-
	M1 is M-1, pow(N,M1,R1). R is N*R1.

fact(1,1).
% N * fact(N-1,R)  fact(N-1)=R1
fact(N,R):- N1 is N-1,fact(N1,R1) ,R is N*R1.

member(H,[H|_]):- !.
member(E,[H|T]):-
	member(E,T).

del(H,[H|T],T):-!.

del(E,[H|T],[H|R]):-
	del(E,T,R).

%L1= [1,-1,0]  L2=[2|L2]. L2=[0|L2] L2=[1|L2]  
addone([],[]).
addone([H|T],[H1|T1]):-
	H1 is H+1, addone(T,T1).

adj(X,Y,[X,Y|_]):-!.
adj(X,Y,[H|T]):-
	adj(X,Y,T).

%L= [1,2,3] 	temp=0	temp=1  temp=3    
sum([],N,N).
sum([H|T],Temp,N):-
	Temp1 is Temp+H, sum(T,Temp1,N).
%([1,2,3,10],0,1,N). N=2
%Counter =0, Counter=1 == Ind so return H/N

nth(L,Ind,Res):- 
	nthelem(L,0,Ind,Res).
nthelem([H|_],Ind,Ind,H):-!.

nthelem([_|T],Counter,Ind,N):-
	Ind > Counter,
	Counter1 is Counter+1, nthelem(T,Counter1,Ind,N). 

% [1,2,3]	l2=[L2|1]  -> L
rev([],l2).
rev([H|T],[L2|H]):-
	rev(T,L2).  


not_div(X,Y):- 0 is X mod Y,!,fail.
not_div(_,_).

partition(_,[],[],[]):-!.
partition(E,[H|L1],[H|L2],L3):-
	H < E,!, partition(E,L1,L2,L3).
partition(E,[H|L1],L2,[H|L3]):-
	 partition(E,L1,L2,L3).

/*partition([],E,[],[]).
partition([H|L],E,[H|L1],L2):-
	H < E, partition(L,E,L1,L2).
partition([H|L],E,L1,[H|L2]):-
	 partition(L,E,L1,L2).*/

remove_dups([],[]).
remove_dups([H|T],L2):-
	member(H,T),!, remove_dups(T,L2).
remove_dups([H|T],[H|L2]):-
	remove_dups(T,L2).

addE(E,L,L):- member(E,L),!.
addE(E,L,[E|L]).

/*not_div(N1,N2):- 0 is N1 mod N2,!,fail.
not_div(_,_).
*/
add([],[]).
add([H|T],L2):-
	member(H,T),!,add(T,L2).
add([H|T],[H|L2]):-
	add(T,L2).

plus(E,[],[]).
plus(E,[H|T],[H1|T1]):-
	H1 is H+1,
	plus(E,T,T1).